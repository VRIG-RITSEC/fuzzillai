diff a/Sources/Fuzzilli/Modules/Storage.swift b/Sources/Fuzzilli/Modules/Storage.swift	(rejected hunks)
@@ -52,6 +54,7 @@ public class Storage: Module {
         do {
             try FileManager.default.createDirectory(atPath: crashesDir, withIntermediateDirectories: true)
             try FileManager.default.createDirectory(atPath: duplicateCrashesDir, withIntermediateDirectories: true)
+            try FileManager.default.createDirectory(atPath: differentialsDir, withIntermediateDirectories: true)
             try FileManager.default.createDirectory(atPath: corpusDir, withIntermediateDirectories: true)
             try FileManager.default.createDirectory(atPath: statisticsDir, withIntermediateDirectories: true)
             if fuzzer.config.enableDiagnostics {
@@ -103,7 +121,7 @@ public class Storage: Module {
         if fuzzer.config.enableDiagnostics {
             fuzzer.registerEventListener(for: fuzzer.events.DiagnosticsEvent) { ev in
                 let filename = "\(self.formatDate())_\(ev.name)_\(String(currentMillis()))"
-                let url = URL(fileURLWithPath: self.diagnosticsDir + filename + ".diag")
+                let url = URL(fileURLWithPath: self.diagnosticsDir + "/" + filename + ".diag")
                 self.createFile(url, withContent: ev.content)
             }
 
@@ -144,6 +162,13 @@ public class Storage: Module {
         }
     }
 
+    private func storeDifferentialDump(_ opt: String, and unopt: String, as filename: String, in directory: String) {
+            let opt_url = URL(fileURLWithPath: "\(directory)/\(filename)_opt.txt")
+            let unopt_url = URL(fileURLWithPath: "\(directory)/\(filename)_unopt.txt")
+            createFile(opt_url, withContent: opt)
+            createFile(unopt_url, withContent: unopt)
+        }
+
     private func storeProgram(_ program: Program, as filename: String, in directory: String) {
         // Always include comments when writing programs to disk
         let options = LiftingOptions.includeComments

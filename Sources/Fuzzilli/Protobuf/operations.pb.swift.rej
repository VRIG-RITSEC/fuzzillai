diff a/Sources/Fuzzilli/Protobuf/operations.pb.swift b/Sources/Fuzzilli/Protobuf/operations.pb.swift	(rejected hunks)
@@ -72,7 +72,7 @@ public enum Fuzzilli_Protobuf_PropertyType: SwiftProtobuf.Enum {
 
 extension Fuzzilli_Protobuf_PropertyType: CaseIterable {
   // The compiler won't synthesize support with the UNRECOGNIZED case.
-  public static let allCases: [Fuzzilli_Protobuf_PropertyType] = [
+  public static var allCases: [Fuzzilli_Protobuf_PropertyType] = [
     .value,
     .getter,
     .setter,
@@ -132,7 +132,7 @@ public enum Fuzzilli_Protobuf_UnaryOperator: SwiftProtobuf.Enum {
 
 extension Fuzzilli_Protobuf_UnaryOperator: CaseIterable {
   // The compiler won't synthesize support with the UNRECOGNIZED case.
-  public static let allCases: [Fuzzilli_Protobuf_UnaryOperator] = [
+  public static var allCases: [Fuzzilli_Protobuf_UnaryOperator] = [
     .preInc,
     .preDec,
     .postInc,
@@ -214,7 +214,7 @@ public enum Fuzzilli_Protobuf_BinaryOperator: SwiftProtobuf.Enum {
 
 extension Fuzzilli_Protobuf_BinaryOperator: CaseIterable {
   // The compiler won't synthesize support with the UNRECOGNIZED case.
-  public static let allCases: [Fuzzilli_Protobuf_BinaryOperator] = [
+  public static var allCases: [Fuzzilli_Protobuf_BinaryOperator] = [
     .add,
     .sub,
     .mul,
@@ -284,7 +284,7 @@ public enum Fuzzilli_Protobuf_Comparator: SwiftProtobuf.Enum {
 
 extension Fuzzilli_Protobuf_Comparator: CaseIterable {
   // The compiler won't synthesize support with the UNRECOGNIZED case.
-  public static let allCases: [Fuzzilli_Protobuf_Comparator] = [
+  public static var allCases: [Fuzzilli_Protobuf_Comparator] = [
     .equal,
     .strictEqual,
     .notEqual,
@@ -1561,6 +1561,16 @@ public struct Fuzzilli_Protobuf_Return {
   public init() {}
 }
 
+public struct Fuzzilli_Protobuf_DifferentialHash {
+  // SwiftProtobuf.Message conformance is added in an extension below. See the
+  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
+  // methods supported on all messages.
+
+  public var unknownFields = SwiftProtobuf.UnknownStorage()
+
+  public init() {}
+}
+
 public struct Fuzzilli_Protobuf_Yield {
   // SwiftProtobuf.Message conformance is added in an extension below. See the
   // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
@@ -2511,192 +2521,6 @@ public struct Fuzzilli_Protobuf_Print {
   public init() {}
 }
 
-#if swift(>=5.5) && canImport(_Concurrency)
-extension Fuzzilli_Protobuf_PropertyType: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_UnaryOperator: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BinaryOperator: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Comparator: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Parameters: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_LoadInteger: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_LoadBigInt: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_LoadFloat: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_LoadString: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_LoadBoolean: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_LoadUndefined: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_LoadNull: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_LoadThis: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_LoadArguments: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_LoadRegExp: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginObjectLiteral: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ObjectLiteralAddProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ObjectLiteralAddElement: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ObjectLiteralAddComputedProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ObjectLiteralCopyProperties: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ObjectLiteralSetPrototype: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginObjectLiteralMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndObjectLiteralMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginObjectLiteralComputedMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndObjectLiteralComputedMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginObjectLiteralGetter: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndObjectLiteralGetter: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginObjectLiteralSetter: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndObjectLiteralSetter: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndObjectLiteral: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginClassDefinition: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginClassConstructor: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndClassConstructor: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ClassAddInstanceProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ClassAddInstanceElement: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ClassAddInstanceComputedProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginClassInstanceMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndClassInstanceMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginClassInstanceGetter: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndClassInstanceGetter: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginClassInstanceSetter: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndClassInstanceSetter: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ClassAddStaticProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ClassAddStaticElement: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ClassAddStaticComputedProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginClassStaticInitializer: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndClassStaticInitializer: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginClassStaticMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndClassStaticMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginClassStaticGetter: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndClassStaticGetter: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginClassStaticSetter: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndClassStaticSetter: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ClassAddPrivateInstanceProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginClassPrivateInstanceMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndClassPrivateInstanceMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ClassAddPrivateStaticProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginClassPrivateStaticMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndClassPrivateStaticMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndClassDefinition: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_CreateArray: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_CreateIntArray: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_CreateFloatArray: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_CreateTemplateString: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_CreateArrayWithSpread: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_LoadBuiltin: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_GetProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_SetProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_UpdateProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_DeleteProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ConfigureProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_GetElement: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_SetElement: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_UpdateElement: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_DeleteElement: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ConfigureElement: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_GetComputedProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_SetComputedProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_UpdateComputedProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_DeleteComputedProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ConfigureComputedProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_TypeOf: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_TestInstanceOf: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_TestIn: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginPlainFunction: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndPlainFunction: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginArrowFunction: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndArrowFunction: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginGeneratorFunction: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndGeneratorFunction: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginAsyncFunction: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndAsyncFunction: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginAsyncArrowFunction: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndAsyncArrowFunction: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginAsyncGeneratorFunction: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndAsyncGeneratorFunction: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginConstructor: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndConstructor: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Return: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Yield: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_YieldEach: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Await: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_CallFunction: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_CallFunctionWithSpread: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Construct: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ConstructWithSpread: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_CallMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_CallMethodWithSpread: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_CallComputedMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_CallComputedMethodWithSpread: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_UnaryOperation: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BinaryOperation: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_TernaryOperation: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Update: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Dup: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Reassign: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_DestructArray: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_DestructArrayAndReassign: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_DestructObject: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_DestructObjectAndReassign: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Compare: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_LoadNamedVariable: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_StoreNamedVariable: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_DefineNamedVariable: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Eval: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_CallSuperConstructor: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_CallSuperMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_GetPrivateProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_SetPrivateProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_UpdatePrivateProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_CallPrivateMethod: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_GetSuperProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_SetSuperProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_GetComputedSuperProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_SetComputedSuperProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_UpdateSuperProperty: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_LoadNewTarget: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Explore: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Probe: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Fixup: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginWith: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndWith: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginIf: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginElse: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndIf: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginSwitch: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginSwitchCase: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginSwitchDefaultCase: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_SwitchBreak: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndSwitchCase: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndSwitch: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginWhileLoopHeader: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginWhileLoopBody: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndWhileLoop: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginDoWhileLoopBody: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginDoWhileLoopHeader: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndDoWhileLoop: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginForLoopInitializer: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginForLoopCondition: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginForLoopAfterthought: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginForLoopBody: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndForLoop: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginForInLoop: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndForInLoop: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginForOfLoop: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginForOfLoopWithDestruct: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndForOfLoop: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginRepeatLoop: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndRepeatLoop: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_LoopBreak: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_LoopContinue: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginTry: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginCatch: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginFinally: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndTryCatch: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndTryCatchFinally: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_ThrowException: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginCodeString: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndCodeString: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_BeginBlockStatement: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_EndBlockStatement: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Nop: @unchecked Sendable {}
-extension Fuzzilli_Protobuf_Print: @unchecked Sendable {}
-#endif  // swift(>=5.5) && canImport(_Concurrency)
-
 // MARK: - Code below here is support for the SwiftProtobuf runtime.
 
 fileprivate let _protobuf_package = "fuzzilli.protobuf"
@@ -2897,11 +2709,8 @@ extension Fuzzilli_Protobuf_LoadString: SwiftProtobuf.Message, SwiftProtobuf._Me
 
   public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
     while let fieldNumber = try decoder.nextFieldNumber() {
-      // The use of inline closures is to circumvent an issue where the compiler
-      // allocates stack space for every case branch when no optimizations are
-      // enabled. https://github.com/apple/swift-protobuf/issues/1034
       switch fieldNumber {
-      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
+      case 1: try decoder.decodeSingularStringField(value: &self.value)
       default: break
       }
     }
@@ -3452,11 +3229,8 @@ extension Fuzzilli_Protobuf_BeginClassDefinition: SwiftProtobuf.Message, SwiftPr
 
   public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
     while let fieldNumber = try decoder.nextFieldNumber() {
-      // The use of inline closures is to circumvent an issue where the compiler
-      // allocates stack space for every case branch when no optimizations are
-      // enabled. https://github.com/apple/swift-protobuf/issues/1034
       switch fieldNumber {
-      case 1: try { try decoder.decodeSingularBoolField(value: &self.hasSuperclass_p) }()
+      case 1: try decoder.decodeSingularBoolField(value: &self.hasSuperclass_p)
       default: break
       }
     }
@@ -4483,11 +4174,8 @@ extension Fuzzilli_Protobuf_LoadBuiltin: SwiftProtobuf.Message, SwiftProtobuf._M
 
   public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
     while let fieldNumber = try decoder.nextFieldNumber() {
-      // The use of inline closures is to circumvent an issue where the compiler
-      // allocates stack space for every case branch when no optimizations are
-      // enabled. https://github.com/apple/swift-protobuf/issues/1034
       switch fieldNumber {
-      case 1: try { try decoder.decodeSingularStringField(value: &self.builtinName) }()
+      case 1: try decoder.decodeSingularStringField(value: &self.builtinName)
       default: break
       }
     }
@@ -5142,25 +4788,18 @@ extension Fuzzilli_Protobuf_BeginPlainFunction: SwiftProtobuf.Message, SwiftProt
 
   public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
     while let fieldNumber = try decoder.nextFieldNumber() {
-      // The use of inline closures is to circumvent an issue where the compiler
-      // allocates stack space for every case branch when no optimizations are
-      // enabled. https://github.com/apple/swift-protobuf/issues/1034
       switch fieldNumber {
-      case 1: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
-      case 2: try { try decoder.decodeSingularBoolField(value: &self.isStrict) }()
+      case 1: try decoder.decodeSingularMessageField(value: &self._parameters)
+      case 2: try decoder.decodeSingularBoolField(value: &self.isStrict)
       default: break
       }
     }
   }
 
   public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
-    // The use of inline closures is to circumvent an issue where the compiler
-    // allocates stack space for every if/case branch local when no optimizations
-    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
-    // https://github.com/apple/swift-protobuf/issues/1182
-    try { if let v = self._parameters {
+    if let v = self._parameters {
       try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
-    } }()
+    }
     if self.isStrict != false {
       try visitor.visitSingularBoolField(value: self.isStrict, fieldNumber: 2)
     }
@@ -5203,25 +4842,18 @@ extension Fuzzilli_Protobuf_BeginArrowFunction: SwiftProtobuf.Message, SwiftProt
 
   public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
     while let fieldNumber = try decoder.nextFieldNumber() {
-      // The use of inline closures is to circumvent an issue where the compiler
-      // allocates stack space for every case branch when no optimizations are
-      // enabled. https://github.com/apple/swift-protobuf/issues/1034
       switch fieldNumber {
-      case 1: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
-      case 2: try { try decoder.decodeSingularBoolField(value: &self.isStrict) }()
+      case 1: try decoder.decodeSingularMessageField(value: &self._parameters)
+      case 2: try decoder.decodeSingularBoolField(value: &self.isStrict)
       default: break
       }
     }
   }
 
   public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
-    // The use of inline closures is to circumvent an issue where the compiler
-    // allocates stack space for every if/case branch local when no optimizations
-    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
-    // https://github.com/apple/swift-protobuf/issues/1182
-    try { if let v = self._parameters {
+    if let v = self._parameters {
       try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
-    } }()
+    }
     if self.isStrict != false {
       try visitor.visitSingularBoolField(value: self.isStrict, fieldNumber: 2)
     }
@@ -5264,25 +4896,18 @@ extension Fuzzilli_Protobuf_BeginGeneratorFunction: SwiftProtobuf.Message, Swift
 
   public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
     while let fieldNumber = try decoder.nextFieldNumber() {
-      // The use of inline closures is to circumvent an issue where the compiler
-      // allocates stack space for every case branch when no optimizations are
-      // enabled. https://github.com/apple/swift-protobuf/issues/1034
       switch fieldNumber {
-      case 1: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
-      case 2: try { try decoder.decodeSingularBoolField(value: &self.isStrict) }()
+      case 1: try decoder.decodeSingularMessageField(value: &self._parameters)
+      case 2: try decoder.decodeSingularBoolField(value: &self.isStrict)
       default: break
       }
     }
   }
 
   public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
-    // The use of inline closures is to circumvent an issue where the compiler
-    // allocates stack space for every if/case branch local when no optimizations
-    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
-    // https://github.com/apple/swift-protobuf/issues/1182
-    try { if let v = self._parameters {
+    if let v = self._parameters {
       try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
-    } }()
+    }
     if self.isStrict != false {
       try visitor.visitSingularBoolField(value: self.isStrict, fieldNumber: 2)
     }
@@ -5325,25 +4950,18 @@ extension Fuzzilli_Protobuf_BeginAsyncFunction: SwiftProtobuf.Message, SwiftProt
 
   public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
     while let fieldNumber = try decoder.nextFieldNumber() {
-      // The use of inline closures is to circumvent an issue where the compiler
-      // allocates stack space for every case branch when no optimizations are
-      // enabled. https://github.com/apple/swift-protobuf/issues/1034
       switch fieldNumber {
-      case 1: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
-      case 2: try { try decoder.decodeSingularBoolField(value: &self.isStrict) }()
+      case 1: try decoder.decodeSingularMessageField(value: &self._parameters)
+      case 2: try decoder.decodeSingularBoolField(value: &self.isStrict)
       default: break
       }
     }
   }
 
   public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
-    // The use of inline closures is to circumvent an issue where the compiler
-    // allocates stack space for every if/case branch local when no optimizations
-    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
-    // https://github.com/apple/swift-protobuf/issues/1182
-    try { if let v = self._parameters {
+    if let v = self._parameters {
       try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
-    } }()
+    }
     if self.isStrict != false {
       try visitor.visitSingularBoolField(value: self.isStrict, fieldNumber: 2)
     }
@@ -5386,25 +5004,18 @@ extension Fuzzilli_Protobuf_BeginAsyncArrowFunction: SwiftProtobuf.Message, Swif
 
   public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
     while let fieldNumber = try decoder.nextFieldNumber() {
-      // The use of inline closures is to circumvent an issue where the compiler
-      // allocates stack space for every case branch when no optimizations are
-      // enabled. https://github.com/apple/swift-protobuf/issues/1034
       switch fieldNumber {
-      case 1: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
-      case 2: try { try decoder.decodeSingularBoolField(value: &self.isStrict) }()
+      case 1: try decoder.decodeSingularMessageField(value: &self._parameters)
+      case 2: try decoder.decodeSingularBoolField(value: &self.isStrict)
       default: break
       }
     }
   }
 
   public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
-    // The use of inline closures is to circumvent an issue where the compiler
-    // allocates stack space for every if/case branch local when no optimizations
-    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
-    // https://github.com/apple/swift-protobuf/issues/1182
-    try { if let v = self._parameters {
+    if let v = self._parameters {
       try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
-    } }()
+    }
     if self.isStrict != false {
       try visitor.visitSingularBoolField(value: self.isStrict, fieldNumber: 2)
     }
@@ -5447,25 +5058,18 @@ extension Fuzzilli_Protobuf_BeginAsyncGeneratorFunction: SwiftProtobuf.Message,
 
   public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
     while let fieldNumber = try decoder.nextFieldNumber() {
-      // The use of inline closures is to circumvent an issue where the compiler
-      // allocates stack space for every case branch when no optimizations are
-      // enabled. https://github.com/apple/swift-protobuf/issues/1034
       switch fieldNumber {
-      case 1: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
-      case 2: try { try decoder.decodeSingularBoolField(value: &self.isStrict) }()
+      case 1: try decoder.decodeSingularMessageField(value: &self._parameters)
+      case 2: try decoder.decodeSingularBoolField(value: &self.isStrict)
       default: break
       }
     }
   }
 
   public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
-    // The use of inline closures is to circumvent an issue where the compiler
-    // allocates stack space for every if/case branch local when no optimizations
-    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
-    // https://github.com/apple/swift-protobuf/issues/1182
-    try { if let v = self._parameters {
+    if let v = self._parameters {
       try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
-    } }()
+    }
     if self.isStrict != false {
       try visitor.visitSingularBoolField(value: self.isStrict, fieldNumber: 2)
     }
@@ -6331,11 +5893,8 @@ extension Fuzzilli_Protobuf_DefineNamedVariable: SwiftProtobuf.Message, SwiftPro
 
   public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
     while let fieldNumber = try decoder.nextFieldNumber() {
-      // The use of inline closures is to circumvent an issue where the compiler
-      // allocates stack space for every case branch when no optimizations are
-      // enabled. https://github.com/apple/swift-protobuf/issues/1034
       switch fieldNumber {
-      case 1: try { try decoder.decodeSingularStringField(value: &self.variableName) }()
+      case 1: try decoder.decodeSingularStringField(value: &self.variableName)
       default: break
       }
     }
@@ -6631,11 +6166,8 @@ extension Fuzzilli_Protobuf_SetSuperProperty: SwiftProtobuf.Message, SwiftProtob
 
   public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
     while let fieldNumber = try decoder.nextFieldNumber() {
-      // The use of inline closures is to circumvent an issue where the compiler
-      // allocates stack space for every case branch when no optimizations are
-      // enabled. https://github.com/apple/swift-protobuf/issues/1034
       switch fieldNumber {
-      case 1: try { try decoder.decodeSingularStringField(value: &self.propertyName) }()
+      case 1: try decoder.decodeSingularStringField(value: &self.propertyName)
       default: break
       }
     }
